{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mhjson mhjson is a simple, elegant Python package to Query over any type of JSON Data. It'll make your life easier by giving the flavour of an ORM-like query on your JSON. Installation pip install https://github.com/Codwizer/mhjson/archive/main.zip --force-reinstall Usage Just import the package before start using it. As a Python Package: from mhjson import MHjson You can start using this package right away by importing your Json data from a file: MHjson('data.json') or MHjson(data={\"id\": 1, \"name\": \"shaonty\"}) # must assign data if you want to pass data instead of file_path You can start Query your data using the various query methods such as where , or_where , where_in , where_not_in , where_starts_with , where_ends_with , where_contains and so on. Also you can aggregate your data after query using sum , count , group_by , sort_by , max , min etc. Let's see a quick example: # sample Json data json_object = { products: [ { id: 1, city: 'bsl', name: 'iPhone', cat: 1, price: 80000.5 }, { id: 2, city: null, name: 'macbook pro', cat: 1, price: 150000 }, { id: 3, city: 'dhk', name: 'Redmi 3S Prime', cat: 2, price: 12000 }, { id: 4, city: 'bsl', name: 'macbook air', cat: 2, price: 110000 } ] }; qe = MHjson(file_path) res = qe.at('products').where('cat', '=', 2).get() print(res) \"\"\"This will print [ { id: 3, city: 'dhk', name: 'Redmi 3S Prime', cat: 2, price: 12000 }, { id: 4, city: 'bsl', name: 'macbook air', cat: 2, price: 110000 } ] \"\"\" Let's say we want to get the Summation of price of the Queried result. We can do it easily by calling the sum() method instead of get() : res = qe.at('products').where('cat', '=', 2).sum('price') print(res) \"\"\"It will print: 122000 \"\"\" Let's explore the full API to see what else magic this library can do for you. Shall we? API Following API examples are shown based on the sample JSON data given here . To get a better idea of the examples see that JSON data first. Also detailed examples of each API can be found here . List of API: get from_path at where or_where where_in where_not_in where_null where_not_null where_starts_with where_ends_with where_contains sum count size max min avg first last nth group_by sort sortBy reset clone chunk get() This method will execute queries and will return the resulted data. You need to call it finally after using some query methods. Details can be found in other API examples. from_file(file_path) This method is the alternative of set json file path. Details can be found in other API examples. example: Let's say you have a file named data.json . You can set path like this: qu = MHjson().from_file('data.json').at('users').where('id', '=', 1).get() at(path) path -- the path hierarchy of the data you want to start query from. By default, query would be started from the root of the JSON Data you've given. If you want to first move to a nested path hierarchy of the data from where you want to start your query, you would use this method. Skipping the path parameter or giving '.' as parameter will also start query from the root Data. example: Let's say you want to start query over the values of 'users' property of your Json Data. You can do it like this: qu = MHjson(file_path).at('users').where('id', '=', 1).get() If you want to traverse to more deep in hierarchy, you can do it like: qe = MHjson(file_path).at('users.5.visits').where('year', '=', 2011).get() where(key, operator, value, case_insensitive) key -- the property name of the data. Or you can pass a Function here to group multiple query inside it. See details in example value -- value to be matched with. It can be a int , string , bool or even float - depending on the operator . operator -- operand to be used for matching. The following operands are available to use: = : For equality matching eq : Same as = != : For weak not equality matching neq : Same as != > : Check if value of given key in data is Greater than value gt : Same as > < : Check if value of given key in data is Less than value lt : Same as < >= : Check if value of given key in data is Greater than or Equal of value gte : Same as >= <= : Check if value of given key in data is Less than or Equal of value lte : Same as <= null : Check if the value of given key in data is null ( value parameter in where() can be omitted for this operator ) notnull : Check if the value of given key in data is not null ( value parameter in where() can be omitted for this operator ) in : Check if the value of given key in data is exists in given value . value should be a plain List . key can be a plain List . notin : Check if the value of given key in data is not exists in given val . val should be a plain List . startswith : Check if the value of given key in data starts with (has a prefix of) the given value . This would only works for String type data. endswith : Check if the value of given key in data ends with (has a suffix of) the given value . This would only works for String type data. contains : Same as in case_insensitive -- if True , the search will be case insensitive, False is default. example: Let's say you want to find the 'users' who has id of 1 . You can do it like this: qu = MHjson(file_path).at('users').where('id', '=', 1).get() You can add multiple where conditions. It'll give the result by AND-ing between these multiple where conditions. qe = MHjson(file_path).at('users').where('id', '=', 1).where('location', '=', 'Sylhet').get() qi = MHjson(file_path).at('users').where('id', '=', 1).where('location', '=', 'sylhet', True).get() or_where(key, operator, value) Parameters of or_where() are the same as where() . The only difference between where() and or_where() is: condition given by the or_where() method will OR-ed the result with other conditions. For example, if you want to find the users with id of 1 or 2 , you can do it like this: re = MHjson(file_path).at('users').where('id', '=', 1).or_where('id', '=', 2).get() where_in(key, value) key -- the property name of the data value -- it should be an List This method will behave like where(key, 'in', value) method call. where_not_in(key, value) key -- the property name of the data value -- it should be an List This method will behave like where(key, 'notin', value) method call. where_null(key) key -- the property name of the data This method will behave like where(key, '=', 'None') method call. where_not_null(key) key -- the property name of the data This method will behave like where(key, '!=', 'None') method call. where_starts_with(key, value) key -- the property name of the data value -- it should be a String This method will behave like where(key, 'startswith', value) method call. where_ends_with(key, value) key -- the property name of the data value -- it should be a String This method will behave like where(key, 'endswith', value) method call. where_contains(key, val) key -- the property name of the data value -- it should be a String or List This method will behave like where(key, 'contains', val) method call. sum(property) property -- the property name of the data example: Let's say you want to find the sum of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').sum('price') If the data you are aggregating is plain list, you don't need to pass the 'property' parameter. See detail example here count() It will return the number of elements in the collection. example: Let's say you want to find how many elements are in the 'products' property. You can do it like: qe = MHjson(file_path).at('products').count() See detail example here . size() This is an alias method of count() . max(property) property -- the property name of the data example: Let's say you want to find the maximum of the 'price' of the 'products' . You can do it like this: qu = MHjson(file_path).at('products').max('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter. min(property) property -- the property name of the data example: Let's say you want to find the minimum of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').min('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter. See detail example here avg(property) property -- the property name of the data example: Let's say you want to find the average of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').avg('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter. first() It will return the first element of the collection. example: qe = MHjson(file_path).at('products').first() See detail example here . last() It will return the last element of the collection. example: qe = MHjson(file_path).at('products').last() nth(index) index -- index of the element to be returned. It will return the nth(n starts from 0) element of the collection. If the given index is a positive value, it will return the nth element from the beginning. If the given index is a negative value, it will return the nth element from the end. example: qe = MHjson(file_path).at('products').nth(2) group_by(property) property -- The property by which you want to group the collection. example: Let's say you want to group the 'users' data based on the 'location' property. You can do it like: qe = MHjson(file_path).at('users').group_by('location').get() sort(order) order -- If you skip the 'order' property the data will be by default ordered as ascending . You need to pass 'desc' as the 'order' parameter to sort the data in descending order. Also, you can pass a compare function in 'order' parameter to define your own logic to order the data. Note: This method should be used for plain Array. If you want to sort an Array of Objects you should use the sortBy() method described later. example: Let's say you want to sort the 'arr' data. You can do it like: qe = MHjson(file_path).at('arr').sort().get() sort_by(property, order) property -- You need to pass the property name on which the sorting will be done. order -- If you skip the 'order' property the data will be by default ordered as ascending . You need to pass 'desc' as the 'order' parameter to sort the data in descending order. Also, you can pass a compare function in 'order' parameter to define your own logic to order the data. Note: This method should be used for Array of Objects. If you want to sort a plain Array you should use the sort() method described earlier. example: Let's say you want to sort the 'price' data of 'products' . You can do it like: qe = MHjson(file_path).at('products').sort_by('price').get() reset(data) data -- can be a JSON file path, or a JSON string or a JSON Object. If no data passed in the data parameter, the JsonQ Object instance will be reset to previously initialised data. At any point, you might want to reset the Object instance to a completely different set of data and then query over it. You can use this method in that case. See a detail example here . clone() It will return a complete clone of the Object instance. chunk(size) It will return a complete new array after chunking your array with specific size.","title":"mhjson"},{"location":"#mhjson","text":"mhjson is a simple, elegant Python package to Query over any type of JSON Data. It'll make your life easier by giving the flavour of an ORM-like query on your JSON.","title":"mhjson"},{"location":"#installation","text":"pip install https://github.com/Codwizer/mhjson/archive/main.zip --force-reinstall","title":"Installation"},{"location":"#usage","text":"Just import the package before start using it. As a Python Package: from mhjson import MHjson You can start using this package right away by importing your Json data from a file: MHjson('data.json') or MHjson(data={\"id\": 1, \"name\": \"shaonty\"}) # must assign data if you want to pass data instead of file_path You can start Query your data using the various query methods such as where , or_where , where_in , where_not_in , where_starts_with , where_ends_with , where_contains and so on. Also you can aggregate your data after query using sum , count , group_by , sort_by , max , min etc. Let's see a quick example: # sample Json data json_object = { products: [ { id: 1, city: 'bsl', name: 'iPhone', cat: 1, price: 80000.5 }, { id: 2, city: null, name: 'macbook pro', cat: 1, price: 150000 }, { id: 3, city: 'dhk', name: 'Redmi 3S Prime', cat: 2, price: 12000 }, { id: 4, city: 'bsl', name: 'macbook air', cat: 2, price: 110000 } ] }; qe = MHjson(file_path) res = qe.at('products').where('cat', '=', 2).get() print(res) \"\"\"This will print [ { id: 3, city: 'dhk', name: 'Redmi 3S Prime', cat: 2, price: 12000 }, { id: 4, city: 'bsl', name: 'macbook air', cat: 2, price: 110000 } ] \"\"\" Let's say we want to get the Summation of price of the Queried result. We can do it easily by calling the sum() method instead of get() : res = qe.at('products').where('cat', '=', 2).sum('price') print(res) \"\"\"It will print: 122000 \"\"\" Let's explore the full API to see what else magic this library can do for you. Shall we?","title":"Usage"},{"location":"#api","text":"Following API examples are shown based on the sample JSON data given here . To get a better idea of the examples see that JSON data first. Also detailed examples of each API can be found here . List of API: get from_path at where or_where where_in where_not_in where_null where_not_null where_starts_with where_ends_with where_contains sum count size max min avg first last nth group_by sort sortBy reset clone chunk","title":"API"},{"location":"#get","text":"This method will execute queries and will return the resulted data. You need to call it finally after using some query methods. Details can be found in other API examples.","title":"get()"},{"location":"#from_filefile_path","text":"This method is the alternative of set json file path. Details can be found in other API examples. example: Let's say you have a file named data.json . You can set path like this: qu = MHjson().from_file('data.json').at('users').where('id', '=', 1).get()","title":"from_file(file_path)"},{"location":"#atpath","text":"path -- the path hierarchy of the data you want to start query from. By default, query would be started from the root of the JSON Data you've given. If you want to first move to a nested path hierarchy of the data from where you want to start your query, you would use this method. Skipping the path parameter or giving '.' as parameter will also start query from the root Data. example: Let's say you want to start query over the values of 'users' property of your Json Data. You can do it like this: qu = MHjson(file_path).at('users').where('id', '=', 1).get() If you want to traverse to more deep in hierarchy, you can do it like: qe = MHjson(file_path).at('users.5.visits').where('year', '=', 2011).get()","title":"at(path)"},{"location":"#wherekey-operator-value-case_insensitive","text":"key -- the property name of the data. Or you can pass a Function here to group multiple query inside it. See details in example value -- value to be matched with. It can be a int , string , bool or even float - depending on the operator . operator -- operand to be used for matching. The following operands are available to use: = : For equality matching eq : Same as = != : For weak not equality matching neq : Same as != > : Check if value of given key in data is Greater than value gt : Same as > < : Check if value of given key in data is Less than value lt : Same as < >= : Check if value of given key in data is Greater than or Equal of value gte : Same as >= <= : Check if value of given key in data is Less than or Equal of value lte : Same as <= null : Check if the value of given key in data is null ( value parameter in where() can be omitted for this operator ) notnull : Check if the value of given key in data is not null ( value parameter in where() can be omitted for this operator ) in : Check if the value of given key in data is exists in given value . value should be a plain List . key can be a plain List . notin : Check if the value of given key in data is not exists in given val . val should be a plain List . startswith : Check if the value of given key in data starts with (has a prefix of) the given value . This would only works for String type data. endswith : Check if the value of given key in data ends with (has a suffix of) the given value . This would only works for String type data. contains : Same as in case_insensitive -- if True , the search will be case insensitive, False is default. example: Let's say you want to find the 'users' who has id of 1 . You can do it like this: qu = MHjson(file_path).at('users').where('id', '=', 1).get() You can add multiple where conditions. It'll give the result by AND-ing between these multiple where conditions. qe = MHjson(file_path).at('users').where('id', '=', 1).where('location', '=', 'Sylhet').get() qi = MHjson(file_path).at('users').where('id', '=', 1).where('location', '=', 'sylhet', True).get()","title":"where(key, operator, value, case_insensitive)"},{"location":"#or_wherekey-operator-value","text":"Parameters of or_where() are the same as where() . The only difference between where() and or_where() is: condition given by the or_where() method will OR-ed the result with other conditions. For example, if you want to find the users with id of 1 or 2 , you can do it like this: re = MHjson(file_path).at('users').where('id', '=', 1).or_where('id', '=', 2).get()","title":"or_where(key, operator, value)"},{"location":"#where_inkey-value","text":"key -- the property name of the data value -- it should be an List This method will behave like where(key, 'in', value) method call.","title":"where_in(key, value)"},{"location":"#where_not_inkey-value","text":"key -- the property name of the data value -- it should be an List This method will behave like where(key, 'notin', value) method call.","title":"where_not_in(key, value)"},{"location":"#where_nullkey","text":"key -- the property name of the data This method will behave like where(key, '=', 'None') method call.","title":"where_null(key)"},{"location":"#where_not_nullkey","text":"key -- the property name of the data This method will behave like where(key, '!=', 'None') method call.","title":"where_not_null(key)"},{"location":"#where_starts_withkey-value","text":"key -- the property name of the data value -- it should be a String This method will behave like where(key, 'startswith', value) method call.","title":"where_starts_with(key, value)"},{"location":"#where_ends_withkey-value","text":"key -- the property name of the data value -- it should be a String This method will behave like where(key, 'endswith', value) method call.","title":"where_ends_with(key, value)"},{"location":"#where_containskey-val","text":"key -- the property name of the data value -- it should be a String or List This method will behave like where(key, 'contains', val) method call.","title":"where_contains(key, val)"},{"location":"#sumproperty","text":"property -- the property name of the data example: Let's say you want to find the sum of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').sum('price') If the data you are aggregating is plain list, you don't need to pass the 'property' parameter. See detail example here","title":"sum(property)"},{"location":"#count","text":"It will return the number of elements in the collection. example: Let's say you want to find how many elements are in the 'products' property. You can do it like: qe = MHjson(file_path).at('products').count() See detail example here .","title":"count()"},{"location":"#size","text":"This is an alias method of count() .","title":"size()"},{"location":"#maxproperty","text":"property -- the property name of the data example: Let's say you want to find the maximum of the 'price' of the 'products' . You can do it like this: qu = MHjson(file_path).at('products').max('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter.","title":"max(property)"},{"location":"#minproperty","text":"property -- the property name of the data example: Let's say you want to find the minimum of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').min('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter. See detail example here","title":"min(property)"},{"location":"#avgproperty","text":"property -- the property name of the data example: Let's say you want to find the average of the 'price' of the 'products' . You can do it like this: qe = MHjson(file_path).at('products').avg('price') If the data you are querying is plain array, you don't need to pass the 'property' parameter.","title":"avg(property)"},{"location":"#first","text":"It will return the first element of the collection. example: qe = MHjson(file_path).at('products').first() See detail example here .","title":"first()"},{"location":"#last","text":"It will return the last element of the collection. example: qe = MHjson(file_path).at('products').last()","title":"last()"},{"location":"#nthindex","text":"index -- index of the element to be returned. It will return the nth(n starts from 0) element of the collection. If the given index is a positive value, it will return the nth element from the beginning. If the given index is a negative value, it will return the nth element from the end. example: qe = MHjson(file_path).at('products').nth(2)","title":"nth(index)"},{"location":"#group_byproperty","text":"property -- The property by which you want to group the collection. example: Let's say you want to group the 'users' data based on the 'location' property. You can do it like: qe = MHjson(file_path).at('users').group_by('location').get()","title":"group_by(property)"},{"location":"#sortorder","text":"order -- If you skip the 'order' property the data will be by default ordered as ascending . You need to pass 'desc' as the 'order' parameter to sort the data in descending order. Also, you can pass a compare function in 'order' parameter to define your own logic to order the data. Note: This method should be used for plain Array. If you want to sort an Array of Objects you should use the sortBy() method described later. example: Let's say you want to sort the 'arr' data. You can do it like: qe = MHjson(file_path).at('arr').sort().get()","title":"sort(order)"},{"location":"#sort_byproperty-order","text":"property -- You need to pass the property name on which the sorting will be done. order -- If you skip the 'order' property the data will be by default ordered as ascending . You need to pass 'desc' as the 'order' parameter to sort the data in descending order. Also, you can pass a compare function in 'order' parameter to define your own logic to order the data. Note: This method should be used for Array of Objects. If you want to sort a plain Array you should use the sort() method described earlier. example: Let's say you want to sort the 'price' data of 'products' . You can do it like: qe = MHjson(file_path).at('products').sort_by('price').get()","title":"sort_by(property, order)"},{"location":"#resetdata","text":"data -- can be a JSON file path, or a JSON string or a JSON Object. If no data passed in the data parameter, the JsonQ Object instance will be reset to previously initialised data. At any point, you might want to reset the Object instance to a completely different set of data and then query over it. You can use this method in that case. See a detail example here .","title":"reset(data)"},{"location":"#clone","text":"It will return a complete clone of the Object instance.","title":"clone()"},{"location":"#chunksize","text":"It will return a complete new array after chunking your array with specific size.","title":"chunk(size)"}]}